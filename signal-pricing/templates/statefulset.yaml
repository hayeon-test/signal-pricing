apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.appPrefix }}-training
  labels:
    app: {{ .Values.appPrefix }}
spec:
  serviceName: "{{ .Values.appPrefix }}"
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.appPrefix }}
  template:
    metadata:
      labels:
        app: {{ .Values.appPrefix }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: nvidia.com/gpu.memory
                  operator: In
                  values:
                  - "20480"
                  - "24268"
      imagePullSecrets:
        - name: ngc-secret
      containers:
        - name: {{ .Values.appPrefix }}-training
          image: "{{ .Values.modelTrainingImage.repository }}:{{ .Values.modelTrainingImage.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.modelTrainingImage.pullPolicy }}
          args: 
            - python 
            - -m 
            - torch.distributed.run 
            - --nproc_per_node={{ .Values.envVars.NGPU }} 
            - train.py
            - --dataset=pricing
            - --data_path=/data/processed/pricing_bin
            - --batch_size={{ .Values.envVars.BATCH_SIZE }}
            - --lr={{ .Values.envVars.LR }}
            - --epochs={{ .Values.envVars.EPOCHS }}
            - --seed={{ .Values.envVars.SEED }}
            - --use_amp
            - --results=/data/results/TFT_pricing_bs{{ .Values.envVars.NGPU }}x{{ .Values.envVars.BATCH_SIZE }}_lr{{ .Values.envVars.LR }}/seed_{{ .Values.envVars.SEED }}
          env:
            - name: SEED
              value: "{{ .Values.envVars.SEED }}"
            - name: CUDA_LAUNCH_BLOCKING
              value: "-1"
            - name: LR
              value: "{{ .Values.envVars.LR }}"
            - name: NGPU
              value: "{{ .Values.envVars.NGPU }}"
            - name: BATCH_SIZE
              value: "{{ .Values.envVars.BATCH_SIZE }}"
            - name: EPOCHS
              value: "{{ .Values.envVars.EPOCHS }}"
            - name: VALIDATION_SAMPLE
              value: "{{ .Values.envVars.VALIDATION_SAMPLE }}"
            - name: TRAIN_SAMPLE
              value: "{{ .Values.envVars.TRAIN_SAMPLE }}"
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: {{ .Values.appPrefix }}-storage
              mountPath: /data
      initContainers:
        - name: {{ .Values.appPrefix }}-feature-engineering
          image: "{{ .Values.featureEngineeringImage.repository }}:{{ .Values.featureEngineeringImage.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.featureEngineeringImage.pullPolicy }}
          command: ["/bin/bash"]
          args: ["-c", "until [[ -f /data/processed/pricing_bin/train.csv ]]; do /workspace/get_data.sh; done"]
          env:
            - name: ALPHA_VANTAGE_API_KEY
              value: {{ .Values.envVars.ALPHA_VANTAGE_API_KEY }}
            - name: SYMBOL
              value: {{ .Values.envVars.SYMBOL }}
            - name: INTERVAL
              value: {{ .Values.envVars.INTERVAL }}
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: {{ .Values.appPrefix }}-storage
              mountPath: /data
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: {{ .Values.appPrefix }}-storage
          persistentVolumeClaim:
            claimName: {{ .Values.appPrefix }}-pvc
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.appPrefix }}-tensorboard
  labels:
    app: {{ .Values.appPrefix }}-tensorboard
spec:
  selector:
    matchLabels:
      app: {{ .Values.appPrefix }}-tensorboard
  serviceName: {{ .Values.appPrefix }}-tensorboard
  replicas: 1
  template:
    metadata:
      labels: 
        app: {{ .Values.appPrefix }}-tensorboard
    spec:
      nodeName: {{ .Values.tensorboardNode }}
      imagePullSecrets:
        - name: ngc-secret
      containers:
        - name: {{ .Values.appPrefix }}-tensorboard
          image: "nvcr.io/nvidia/tensorflow:22.01-tf2-py3"
          ports:
            - name: tensorboard
              containerPort: 6006
              protocol: TCP
          command: ["/bin/bash"]
          args: ["-c", "pip install -U tensorboard-plugin-profile && tensorboard --logdir=/data/results --bind_all"]
          env:
            - name: CUDA_VISIBLE_DEVICES
              value: "-1"
          volumeMounts:
            - name: {{ .Values.appPrefix }}-storage
              mountPath: /data/results
      volumes:
        - name: {{ .Values.appPrefix }}-storage
          persistentVolumeClaim:
            claimName: {{ .Values.appPrefix }}-pvc