apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Values.appPrefix }}-training
  labels:
    app: {{ .Values.appPrefix }}
spec:
  schedule: "@monthly"
  jobTemplate:
    metadata:
      labels:
        app: {{ .Values.appPrefix }}
    spec:
      template:
        spec:
        {{- with .Values.modelTraining.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
        {{- end }}
          imagePullSecrets:
            - name: ngc-secret
          restartPolicy: Never
          containers:
            - name: {{ .Values.appPrefix }}-training
              image: "{{ .Values.modelTraining.repository }}:{{ .Values.modelTraining.tag | default .Chart.AppVersion }}"
              imagePullPolicy: Always
              args: 
                - python 
                - -m 
                - torch.distributed.run 
                - --nproc_per_node={{ .Values.modelTraining.env.NGPU }} 
                - train.py
                - --dataset=pricing
                - --data_path=/data/processed/pricing_bin
                - --batch_size={{ .Values.modelTraining.env.BATCH_SIZE }}
                - --lr={{ .Values.modelTraining.env.LR }}
                - --epochs={{ .Values.modelTraining.env.EPOCHS }}
                - --seed={{ .Values.modelTraining.env.SEED }}
                - --use_amp
                - --results=/data/results/TFT_pricing_bs{{ .Values.modelTraining.env.NGPU }}x{{ .Values.modelTraining.env.BATCH_SIZE }}_lr{{ .Values.modelTraining.env.LR }}/seed_{{ .Values.modelTraining.env.SEED }}
              env:
                - name: SEED
                  value: "{{ .Values.modelTraining.env.SEED }}"
                - name: CUDA_LAUNCH_BLOCKING
                  value: "-1"
                - name: LR
                  value: "{{ .Values.modelTraining.env.LR }}"
                - name: NGPU
                  value: "{{ .Values.modelTraining.env.NGPU }}"
                - name: BATCH_SIZE
                  value: "{{ .Values.modelTraining.env.BATCH_SIZE }}"
                - name: EPOCHS
                  value: "{{ .Values.modelTraining.env.EPOCHS }}"
                - name: VALIDATION_SAMPLE
                  value: "{{ .Values.modelTraining.env.VALIDATION_SAMPLE }}"
                - name: TRAIN_SAMPLE
                  value: "{{ .Values.modelTraining.env.TRAIN_SAMPLE }}"
            {{- with .Values.modelTraining.resources }}
              resources:
                {{- toYaml . | nindent 16 }}
            {{- end }}
              volumeMounts:
                - name: dshm
                  mountPath: /dev/shm
                - name: {{ .Values.appPrefix }}-storage
                  mountPath: /data
          initContainers:
            - name: {{ .Values.appPrefix }}-feature-engineering
              image: "{{ .Values.featureEngineering.repository }}:{{ .Values.featureEngineering.tag | default .Chart.AppVersion }}"
              imagePullPolicy: Always
              command: ["/bin/bash"]
              args: ["-c", "/workspace/get_data.sh"]
              env:
                - name: ALPHA_VANTAGE_API_KEY
                  value: {{ .Values.featureEngineering.env.ALPHA_VANTAGE_API_KEY }}
                - name: SYMBOL
                  value: {{ .Values.featureEngineering.env.SYMBOL }}
                - name: INTERVAL
                  value: {{ .Values.featureEngineering.env.INTERVAL }}
              volumeMounts:
                - name: dshm
                  mountPath: /dev/shm
                - name: {{ .Values.appPrefix }}-storage
                  mountPath: /data
          volumes:
            - name: dshm
              emptyDir:
                medium: Memory
            - name: {{ .Values.appPrefix }}-storage
              persistentVolumeClaim:
                claimName: {{ .Values.appPrefix }}-pvc